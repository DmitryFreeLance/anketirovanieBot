package ru.phosagro.survey.util;

import com.pengrad.telegrambot.model.request.InlineKeyboardButton;
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup;
import ru.phosagro.survey.model.Option;
import ru.phosagro.survey.model.Question;
import ru.phosagro.survey.model.QuestionType;

import java.util.*;

public class Keyboards {

    /* ===== –°—Ç–∞—Ä—Ç ===== */

    public static InlineKeyboardMarkup startKeyboard(String caption) {
        return new InlineKeyboardMarkup(
                new InlineKeyboardButton(caption).callbackData("start")
        );
    }

    /* ===== –ê–¥–º–∏–Ω –º–µ–Ω—é ===== */

    public static InlineKeyboardMarkup adminMenu() {
        return new InlineKeyboardMarkup(
                new InlineKeyboardButton("üî¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞").callbackData("admin:stats"),
                new InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏").callbackData("admin:users"),
                new InlineKeyboardButton("üìä Excel-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞").callbackData("admin:export")
        );
    }

    /** –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞) */
    public static InlineKeyboardMarkup adminStatsNav(int pageIndex, int totalPages) {
        // pageIndex –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1 –≤ –≤—ã–∑–æ–≤–µ –∏–∑ –±–æ—Ç–∞ (0-—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —à–ª—ë–º –±–µ–∑ –∫–ª–∞–≤—ã)
        List<InlineKeyboardButton[]> rows = new ArrayList<>();
        if (pageIndex < totalPages - 1) {
            rows.add(new InlineKeyboardButton[]{
                    new InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è").callbackData("admin:stats:next:" + (pageIndex + 1))
            });
        }
        rows.add(new InlineKeyboardButton[]{
                new InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å").callbackData("admin:menu")
        });
        return new InlineKeyboardMarkup(rows.toArray(new InlineKeyboardButton[0][]));
    }

    /** –ö–Ω–æ–ø–∫–∞ ¬´—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞¬ª –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */
    public static InlineKeyboardMarkup adminUsersNext(int nextPageIndex) {
        return new InlineKeyboardMarkup(
                new InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞").callbackData("admin:users:page:" + nextPageIndex),
                new InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å").callbackData("admin:menu")
        );
    }

    /* ===== –ê–Ω–∫–µ—Ç–∞ ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ ===== */

    public static InlineKeyboardMarkup forQuestion(Question q, Set<String> selected) {
        if (selected == null) selected = new LinkedHashSet<>();
        List<InlineKeyboardButton[]> rows = new ArrayList<>();
        final int MAX_LEN = 28, MIN_LEN = 22;

        if (q.getType() == QuestionType.RATING_1_10) {
            InlineKeyboardButton[] r1 = new InlineKeyboardButton[5];
            InlineKeyboardButton[] r2 = new InlineKeyboardButton[5];
            for (int i = 1; i <= 5; i++)
                r1[i - 1] = new InlineKeyboardButton(String.valueOf(i)).callbackData("ans:" + q.getId() + ":r:" + i);
            for (int i = 6; i <= 10; i++)
                r2[i - 6] = new InlineKeyboardButton(String.valueOf(i)).callbackData("ans:" + q.getId() + ":r:" + i);
            rows.add(r1);
            rows.add(r2);
        } else if (q.getType() == QuestionType.SINGLE) {
            for (Option o : q.getOptions()) {
                if (o.isOther()) continue; // ¬´–î—Ä—É–≥–æ–µ¬ª —É–±–∏—Ä–∞–µ–º –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Äî –≤–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç–æ–º
                String label = pad(wrapLabel(o.getText(), MAX_LEN), MIN_LEN);
                rows.add(new InlineKeyboardButton[]{
                        new InlineKeyboardButton(label).callbackData("ans:" + q.getId() + ":s:" + o.getId())
                });
            }
        } else if (q.getType() == QuestionType.MULTI) {
            for (Option o : q.getOptions()) {
                if (o.isOther()) continue; // ¬´–î—Ä—É–≥–æ–µ¬ª ‚Äî —Ç–µ–∫—Å—Ç–æ–º
                boolean on = selected.contains(o.getId());
                String base = (on ? "‚úÖ " : "") + o.getText();
                String label = pad(wrapLabel(base, MAX_LEN), MIN_LEN);
                rows.add(new InlineKeyboardButton[]{
                        new InlineKeyboardButton(label).callbackData("ans:" + q.getId() + ":m:" + o.getId())
                });
            }
        } else if (q.getType() == QuestionType.TEXT) {
            rows.add(new InlineKeyboardButton[]{
                    new InlineKeyboardButton("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º").callbackData("noop")
            });
        }
        return new InlineKeyboardMarkup(rows.toArray(new InlineKeyboardButton[0][]));
    }

    /* ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ===== */

    // –ü–µ—Ä–µ–Ω–æ—Å —Å–ª–æ–≤ –≤ –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—è—Ö, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ ¬´—à–∏—Ä–µ¬ª
    private static String wrapLabel(String s, int maxLineLen) {
        if (s == null) return "";
        if (s.length() <= maxLineLen) return s;
        String[] words = s.split("\\s+");
        StringBuilder out = new StringBuilder();
        int cur = 0;
        for (String w : words) {
            if (cur == 0) { out.append(w); cur = w.length(); }
            else if (cur + 1 + w.length() <= maxLineLen) { out.append(' ').append(w); cur += 1 + w.length(); }
            else { out.append('\n').append(w); cur = w.length(); }
        }
        return out.toString();
    }

    // –ù–µ–º–Ω–æ–≥–æ ¬´—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º¬ª –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏, —á—Ç–æ–±—ã –≤ –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ –≤—ã–≥–ª—è–¥–µ–ª–æ —Ä–æ–≤–Ω–µ–µ
    private static String pad(String s, int minLen) {
        if (s == null) return "";
        int len = s.length();
        if (len >= minLen) return s;
        StringBuilder sb = new StringBuilder(s);
        for (int i = 0; i < (minLen - len); i++) sb.append('\u2009'); // —Ç–æ–Ω–∫–∏–π –ø—Ä–æ–±–µ–ª
        return sb.toString();
    }
}