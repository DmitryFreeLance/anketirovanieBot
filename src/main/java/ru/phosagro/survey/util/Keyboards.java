package ru.phosagro.survey.util;

import com.pengrad.telegrambot.model.request.InlineKeyboardButton;
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup;
import ru.phosagro.survey.model.Option;
import ru.phosagro.survey.model.Question;
import ru.phosagro.survey.model.QuestionType;

import java.util.*;

public class Keyboards {

    public static InlineKeyboardMarkup startKeyboard(String caption) {
        return new InlineKeyboardMarkup(new InlineKeyboardButton(caption).callbackData("start"));
    }

    public static InlineKeyboardMarkup adminMenu() {
        return new InlineKeyboardMarkup(
                new InlineKeyboardButton("üî¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞").callbackData("admin:stats"),
                new InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏").callbackData("admin:users")
        );
    }

    /** –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: —Å–ª–µ–≤–∞ ‚û°Ô∏è —Å–ª–µ–¥—É—é—â–∏–π, —Å–ø—Ä–∞–≤–∞ üè† –¥–æ–º–æ–π. */
    public static InlineKeyboardMarkup adminStatsNav(int pageIndex, int totalPages) {
        List<InlineKeyboardButton[]> rows = new ArrayList<>();
        if (pageIndex < totalPages - 1) {
            rows.add(new InlineKeyboardButton[] {
                    new InlineKeyboardButton("‚û°Ô∏è —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å").callbackData("admin:stats:next:" + (pageIndex + 1)),
                    new InlineKeyboardButton("üè† –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å").callbackData("admin:menu")
            });
        } else {
            rows.add(new InlineKeyboardButton[] {
                    new InlineKeyboardButton("üè† –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å").callbackData("admin:menu")
            });
        }
        return new InlineKeyboardMarkup(rows.toArray(new InlineKeyboardButton[0][]));
    }

    /** –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ ¬´–≤–ø–µ—Ä—ë–¥¬ª). */
    public static InlineKeyboardMarkup adminUsersNext(int nextPageIndex) {
        return new InlineKeyboardMarkup(
                new InlineKeyboardButton("‚û°Ô∏è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞").callbackData("admin:users:page:" + nextPageIndex)
        );
    }

    /** –ú—è–≥–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π –≤ inline-–∫–Ω–æ–ø–∫–∞—Ö. */
    private static String wrapLabel(String s, int maxLineLen) {
        if (s == null) return "";
        if (s.length() <= maxLineLen) return s;
        String[] words = s.split("\\s+");
        StringBuilder out = new StringBuilder();
        int cur = 0;
        for (String w : words) {
            if (cur == 0) { out.append(w); cur = w.length(); }
            else if (cur + 1 + w.length() <= maxLineLen) { out.append(' ').append(w); cur += 1 + w.length(); }
            else { out.append('\n').append(w); cur = w.length(); }
        }
        return out.toString();
    }

    /** –ü–∞–¥–¥–∏–Ω–≥ —Ç–æ–Ω–∫–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ (U+2009) –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã ‚Äî –≤–∏–∑—É–∞–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –∫–Ω–æ–ø–∫—É. */
    private static String padThinSpaces(String s, int minLen) {
        if (s == null) return "";
        int len = s.length();
        if (len >= minLen) return s;
        StringBuilder sb = new StringBuilder(s);
        for (int i = 0; i < (minLen - len); i++) sb.append('\u2009'); // THIN SPACE
        return sb.toString();
    }

    public static InlineKeyboardMarkup forQuestion(Question q, Set<String> selected) {
        if (selected == null) selected = new LinkedHashSet<>();
        List<InlineKeyboardButton[]> rows = new ArrayList<>();

        final int MAX_LEN = 28;   // –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –∫–Ω–æ–ø–∫–µ
        final int MIN_LEN = 22;   // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è ¬´—à–∏—Ä–∏–Ω–∞¬ª –∫–Ω–æ–ø–∫–∏ —Ç–æ–Ω–∫–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏

        if (q.getType() == QuestionType.RATING_1_10) {
            InlineKeyboardButton[] r1 = new InlineKeyboardButton[5];
            InlineKeyboardButton[] r2 = new InlineKeyboardButton[5];
            for (int i=1;i<=5;i++) r1[i-1] = new InlineKeyboardButton(String.valueOf(i)).callbackData("ans:" + q.getId() + ":r:" + i);
            for (int i=6;i<=10;i++) r2[i-6] = new InlineKeyboardButton(String.valueOf(i)).callbackData("ans:" + q.getId() + ":r:" + i);
            rows.add(r1); rows.add(r2);
        } else if (q.getType() == QuestionType.SINGLE) {
            for (Option o: q.getOptions()) {
                String base = o.getText(); // –ë–ï–ó " (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç)"
                String label = padThinSpaces(wrapLabel(base, MAX_LEN), MIN_LEN);
                rows.add(new InlineKeyboardButton[] {
                        new InlineKeyboardButton(label).callbackData("ans:" + q.getId() + ":s:" + o.getId())
                });
            }
        } else if (q.getType() == QuestionType.MULTI) {
            for (Option o: q.getOptions()) {
                boolean on = selected.contains(o.getId()); // –æ—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ ID
                String base = o.getText(); // –ë–ï–ó " (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç)"
                String prefix = on ? "‚úÖ " : "";
                String label = padThinSpaces(wrapLabel(prefix + base, MAX_LEN), MIN_LEN);
                rows.add(new InlineKeyboardButton[] {
                        new InlineKeyboardButton(label).callbackData("ans:" + q.getId() + ":m:" + o.getId())
                });
            }
            // –ö–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º ‚Äî –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥.
        } else if (q.getType() == QuestionType.TEXT) {
            rows.add(new InlineKeyboardButton[] {
                    new InlineKeyboardButton("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º").callbackData("noop")
            });
        }
        return new InlineKeyboardMarkup(rows.toArray(new InlineKeyboardButton[0][]));
    }
}